package uk.ac.standrews.cs.sos.impl.manifest;

import uk.ac.standrews.cs.guid.IGUID;
import uk.ac.standrews.cs.guid.impl.keys.InvalidID;
import uk.ac.standrews.cs.sos.exceptions.crypto.SignatureException;
import uk.ac.standrews.cs.sos.model.ManifestType;
import uk.ac.standrews.cs.sos.model.Role;
import uk.ac.standrews.cs.sos.utils.IO;

import java.io.IOException;

/**
 * Abstract class for all manifests that support signatures.
 *
 * @author Simone I. Conte "sic2@st-andrews.ac.uk"
 */
public abstract class SignedManifest extends BasicManifest {

    protected final Role signer;
    protected String signature;

    /**
     * Constructor for a signed manifest.
     *
     * @param signer for this manifest
     * @param manifestType the type of manifest
     */
    protected SignedManifest(Role signer, ManifestType manifestType) {
        super(manifestType);

        this.signer = signer;
    }

    /**
     * Get the signer identifier used for this manifest
     *
     * @return the GUID for the signer
     */
    public IGUID getSigner() {

        if (this.signer != null) {
            return this.signer.guid();

        } return new InvalidID();

    }

    /**
     * Gets the signature of this manifest.
     *
     * @return signature of this manifest.
     */
    public String getSignature() {
        return this.signature;
    }

    /**
     * Verify this manifest against the given identity
     *
     * @param role used to satisfied the signature
     * @return true if the signature was generated by that role
     * @throws SignatureException if the verification could not be carried out
     */
    @Override
    public boolean verifySignature(Role role) throws SignatureException {

        try {
            String manifestToSign = IO.InputStreamToString(contentToHash());
            return role.verify(manifestToSign, signature);
        } catch (IOException e) {
            throw new SignatureException(e);
        }
    }

    /**
     * Generate the signature for this manifest
     *
     * @return the signature for this manifest
     * @throws SignatureException if the manifest could not signed
     */
    protected String makeSignature() throws SignatureException {

        try {
            String manifestToSign = IO.InputStreamToString(contentToHash());
            return generateSignature(manifestToSign);

        } catch (IOException e) {
            throw new SignatureException(e);
        }

    }

     /**
     * Generates the signature for this manifest.
     *
     * @return signature of this manifest.
     */
    protected abstract String generateSignature(String toSign) throws SignatureException;
}
